//recursion
#include <bits/stdc++.h> 
int helper(int i,int j,vector<vector<int>> &grid){
    if(i==0&&j==0) return grid[0][0];
    if(i<0||j<0) return 10000000;    
    int up=helper(i-1,j,grid)+grid[i][j];
    int left=helper(i,j-1,grid)+grid[i][j];
    return min(up,left);
}
int minSumPath(vector<vector<int>> &grid) {
    int m=grid.size();
    int n=grid[0].size();
    return helper(m-1,n-1,grid);
}
//memoization
#include <bits/stdc++.h> 
int helper(int i,int j,vector<vector<int>> &grid,vector<vector<int>> &dp){
    if(i==0&&j==0) return grid[0][0];
    if(i<0||j<0) return 10000000;
    if(dp[i][j]!=-1) return dp[i][j];
    int up=helper(i-1,j,grid,dp)+grid[i][j];
    int left=helper(i,j-1,grid,dp)+grid[i][j];
    return dp[i][j]=min(up,left);
}
int minSumPath(vector<vector<int>> &grid) {
    int m=grid.size();
    int n=grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,-1));
    return helper(m-1,n-1,grid,dp);
}
//DP
 int minPathSum(vector<vector<int>>& grid) {
    int m=grid.size();
    int n=grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,0));
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(i==0&&j==0) dp[0][0]=grid[0][0];
            else {
              int left = 10000000;
              int up = 10000000;
              if (i > 0)  up = dp[i - 1][j] + grid[i][j];
              if (j > 0)  left = dp[i][j - 1] + grid[i][j];
              dp[i][j] = min(up, left);
            }
        }
    }
    return dp[m-1][n-1];
    }
    //space optmization
    
