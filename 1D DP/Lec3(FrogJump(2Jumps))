#include <bits/stdc++.h> 
//memoization
int f(int ind,vector<int> &heights,vector<int> &dp){
    if(ind==0){
        return 0;
    }
    if(dp[ind]!=-1) return dp[ind];
    int left=f(ind-1,heights,dp)+abs(heights[ind]-heights[ind-1]);
    int right=INT_MAX;
    if(ind>1) right=f(ind-2,heights,dp)+abs(heights[ind]-heights[ind-2]);
    dp[ind]=min(left,right);
    return dp[ind];
}
int frogJump(int n, vector<int> &heights){
    vector<int> dp(n+1,-1);
    return f(n-1,heights,dp);
}
//space optimized
int frogJump(int n, vector<int> &heights)
{
    int a=0;
    int b=0;
    int curri;
    for(int i=1;i<n;i++){
        int fs=b+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if (i > 1) {
           ss = a + abs(heights[i] - heights[i - 2]);
        }
        curri=min(fs,ss);
        a=b;
        b=curri;
    }
    return b;
}
//Tabulation
/*
int frogJump(int n, vector<int> &heights){
    int prev2=0;
    int prev=abs(heights[1]-heights[0]);
    int curri;
    for(int i=2;i<=n-1;i++){
        int left=prev+abs(heights[i]-heights[i-1]);
        int right=prev2+abs(heights[i]-heights[i-2]);
        curri=min(left,right);
        prev2=prev;
        prev=curri;
    }
    return prev;
}
*/
