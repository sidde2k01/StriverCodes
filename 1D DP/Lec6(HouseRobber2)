//Leetcode houserobber2
int MaxNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    int a=0;
    int b=nums[0];
    for(int i=1;i<n;i++){
        int pick=nums[i];
        if(i>1) pick+=a;
        int notpick=0+b;
        int c=max(pick,notpick);
        a=b;
        b=c;
    }
    return b;
}
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        vector<int> temp1,temp2;
        for(int i=0;i<n;i++){
            if(i!=0) temp1.push_back(nums[i]);
            if(i!=(n-1)) temp2.push_back(nums[i]);
        }
        return max(MaxNonAdjacentSum(temp1),MaxNonAdjacentSum(temp2));
    }
    
    
    
    //Codestudio
    #include <bits/stdc++.h> 
long long int MaxNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    long long int a=0;
    long long int b=nums[0];
    for(int i=1;i<n;i++){
        long long int pick=nums[i];
        if(i>1) pick+=a;
        long long int notpick=0+b;
        long long int c=max(pick,notpick);
        a=b;
        b=c;
    }
    return b;
}
long long int houseRobber(vector<int>& valueInHouse)
{
    int n=valueInHouse.size();
        if(n==1) return valueInHouse[0];
        vector<int> temp1,temp2;
        for(int i=0;i<n;i++){
            if(i!=0) temp1.push_back(valueInHouse[i]);
            if(i!=(n-1)) temp2.push_back(valueInHouse[i]);
        }
        return max(MaxNonAdjacentSum(temp1),MaxNonAdjacentSum(temp2));
    }
