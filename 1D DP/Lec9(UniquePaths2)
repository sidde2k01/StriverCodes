//recursion
int mod=(int)(1e9+7);
int helper(int i,int j,vector< vector< int> > &mat){
    if(i>=0&&j>=0&&mat[i][j]==-1) return 0;
    if(i==0&&j==0) return 1;
    if(i<0||j<0) return 0;
    int up=helper(i-1,j,mat)%mod;
    int left=helper(i,j-1,mat)%mod;
    return (up+left)%mod;
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    return helper(n-1,m-1,mat);
}
//memoization
int mod=(int)(1e9+7);
int helper(int i,int j,vector<vector<int> > &obstacleGrid,vector<vector<int>> &dp){
    if(i>=0&&j>=0&&obstacleGrid[i][j]==1) return 0;
    if(i==0&&j==0) return 1;
    if(i<0||j<0) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    int up=helper(i-1,j,obstacleGrid,dp);
    int left=helper(i,j-1,obstacleGrid,dp);
    return dp[i][j]=up+left;
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
            return helper(m-1,n-1,obstacleGrid,dp);
    }
/DP
  int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,0));
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(obstacleGrid[i][j]==1) dp[i][j]=0;
            else if(i==0&&j==0) dp[i][j]=1;
            else {
              int left = 0, up = 0;
              if (i > 0) up = (dp[i - 1][j]);
              if (j > 0) left = (dp[i][j - 1]);
              dp[i][j] = left + up;
            }
        }
    }
    return dp[m-1][n-1];
    }
//space optimization
 int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
    vector<int> prev(n,0);
    for(int i=0;i<m;i++){
        vector<int> cur(n,0);
        for(int j=0;j<n;j++){
            if(obstacleGrid[i][j]==1) cur[j]=0;
            else if(i==0&&j==0) cur[j]=1;
            else {
              int left = 0, up = 0;
              if (i > 0) up = prev[j];
              if (j > 0) left = cur[j - 1];
              cur[j] = left + up;
            }
        }
        prev=cur;
    }
    return prev[n-1];
    }
