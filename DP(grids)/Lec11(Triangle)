//recursion
#include <bits/stdc++.h> 
int f(int i,int j,int n,vector<vector<int>> &triangle){
	if(i==n-1) return triangle[i][j];
	int down=triangle[i][j]+f(i+1,j,n,triangle);
	int diagonal=triangle[i][j]+f(i+1,j+1,n,triangle);
	return min(down,diagonal);
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
	return f(0,0,n,triangle);
}
//memoization
#include <bits/stdc++.h> 
int f(int i,int j,int n,vector<vector<int>> &triangle,vector<vector<int>> &dp){
	if(i==n-1) return triangle[i][j];
	if(dp[i][j]!=-1) return dp[i][j];
	int down=triangle[i][j]+f(i+1,j,n,triangle,dp);
	int diagonal=triangle[i][j]+f(i+1,j+1,n,triangle,dp);
	return dp[i][j]=min(down,diagonal);
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
	vector<vector<int>> dp(n,vector<int>(n,-1));
	return f(0,0,n,triangle,dp);
}
//tabulation
#include <bits/stdc++.h> 
int minimumPathSum(vector<vector<int>>& triangle, int n){
	vector<vector<int>> dp(n,vector<int>(n,0));
	for(int i=n-1;i>=0;i--){
		for(int j=i;j>=0;j--){
			if(i==n-1) dp[i][j]=triangle[i][j];
			else{
				int down=triangle[i][j]+dp[i+1][j];
				int diagonal=triangle[i][j]+dp[i+1][j+1];
				dp[i][j]=min(down,diagonal);
			}
		}
	}
	return dp[0][0];
}
//space optimization
#include <bits/stdc++.h> 
int minimumPathSum(vector<vector<int>>& triangle, int n){
	vector<int> front(n,0);
	for(int i=n-1;i>=0;i--){
		vector<int> cur(i+1,0);   //or cur(n,0)
		for(int j=i;j>=0;j--){
			if(i==n-1) cur[j]=triangle[i][j];
			else{
				int down=triangle[i][j]+front[j];
				int diagonal=triangle[i][j]+front[j+1];
				cur[j]=min(down,diagonal);
			}
		}
		front=cur;
	}
	return front[0];
}
