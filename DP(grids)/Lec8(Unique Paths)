//recursion
#include <bits/stdc++.h> 
int helper(int i,int j){
	if(i==0&&j==0){
		return 1;
	}
	if(i<0||j<0){
		return 0;
	}
	int up=helper(i-1,j);
	int left=helper(i,j-1);
	return up+left;
}
int uniquePaths(int m, int n) {
	return helper(m-1,n-1);
}
//memoization
#include <bits/stdc++.h> 
int helper(int i,int j,vector<vector<int>> &dp){
	if(i==0&&j==0){
		return 1;
	}
	if(i<0||j<0){
		return 0;
	}
	if(dp[i][j]!=-1) return dp[i][j];
	int up=helper(i-1,j,dp);
	int left=helper(i,j-1,dp);
	return dp[i][j]=up+left;
}
int uniquePaths(int m, int n) {
	vector<vector<int>> dp(m,vector<int>(n,-1));
	return helper(m-1,n-1,dp);
}
//tabulation
#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {
	vector<vector<int>> dp(m,vector<int>(n,-1)); 
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			if(i==0&&j==0) dp[0][0]=1;
			else{
				int top=0,left=0;
				if(i>0) top=dp[i-1][j];
				if(j>0) left=dp[i][j-1];
				dp[i][j]=top+left;
			}
		}
	}
	return dp[m-1][n-1];
}
//space optimize
#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {
	vector<int> prev(n,0);
	for(int i=0;i<m;i++){
		vector<int> temp(n,0);
		for(int j=0;j<n;j++){
			if(i==0&&j==0) temp[0]=1;
                  else {
                    if (j > 0) temp[j] = prev[j] + temp[j - 1];
					else temp[j]=1;
					
                  }
                }
		prev=temp;
	}
	return prev[n-1];
}
