//recursion
    class Solution {
public:
int f(int i,int j,int rows,int columns,vector<vector<int>> &matrix){
    if(i==0){
        return matrix[i][j];
    }
    int ld=INT_MAX,rd=INT_MAX;
    if(j>0) ld=f(i-1,j-1,rows,columns,matrix)+matrix[i][j];
    int up=f(i-1,j,rows,columns,matrix)+matrix[i][j];
    if(j<columns-1) rd=f(i-1,j+1,rows,columns,matrix)+matrix[i][j];

    return min(ld,min(up,rd)); 
}
    int minFallingPathSum(vector<vector<int>>& matrix) {
    int m=matrix.size();
    int n=matrix[0].size();
    int mini=INT_MAX;
    for (int i = 0; i < n; i++) {
      mini=min(mini,f(m - 1, i , m, n, matrix));
    }
    return mini;
    }
    //memoization
    class Solution {
public:
    int f(int i,int j,int columns,vector<vector<int>> &matrix,vector<vector<int>> &dp){
    if(i==0){
        return matrix[i][j];
    }
    if(dp[i][j]!=200) return dp[i][j];
    int ld=INT_MAX,rd=INT_MAX;
    if(j>0) ld=f(i-1,j-1,columns,matrix,dp)+matrix[i][j];
    int up=f(i-1,j,columns,matrix,dp)+matrix[i][j];
    if(j<columns-1) rd=f(i-1,j+1,columns,matrix,dp)+matrix[i][j];
    return dp[i][j]=min(ld,min(up,rd)); 
}
    int minFallingPathSum(vector<vector<int>>& matrix) {
    int n=matrix.size();
    vector<vector<int>> dp(n,vector<int>(n,200));
    int mini=INT_MAX;
    for (int i = 0; i < n; i++) {
      mini=min(mini,f(n - 1, i , n, matrix,dp));
    }
    return mini;
    }
};
//tabulation
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
   vector<vector<int>> dp(n,vector<int>(n,0));
   for(int j=0;j<n;j++){
       dp[0][j]=matrix[0][j];
   }
   for(int i=1;i<n;i++){
       for(int j=0;j<n;j++){
           int ld=INT_MAX,rd=INT_MAX;
           if(j>0) ld=dp[i-1][j-1]+matrix[i][j];
           int up=dp[i-1][j]+matrix[i][j];
           if(j<n-1) rd=dp[i-1][j+1]+matrix[i][j];
           dp[i][j]=min(ld,min(up,rd));
       }
   }
   int maxi=INT_MAX;
   for(int j=0;j<n;j++){
       maxi=min(maxi,dp[n-1][j]);
   }
   return maxi;
    }
};
//space optimization
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<int> prev(n,0);
   for(int j=0;j<n;j++){
       prev[j]=matrix[0][j];
   }
   for(int i=1;i<n;i++){
       vector<int> cur(n,0);
       for(int j=0;j<n;j++){
           int ld=INT_MAX,rd=INT_MAX;
           if(j>0) ld=prev[j-1]+matrix[i][j];
           int up=prev[j]+matrix[i][j];
           if(j<n-1) rd=prev[j+1]+matrix[i][j];
           cur[j]=min(ld,min(up,rd));
       }
       prev=cur;
   }
   int maxi=INT_MAX;
   for(int j=0;j<n;j++){
       maxi=min(maxi,prev[j]);
   }
   return maxi;
    }
};
